// frontend/src/utils/reportGenerator.js
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const generatePDFReport = async (soilData, recommendations, userContext, strings) => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header with logo and branding
  pdf.setFillColor(34, 197, 94); // Primary green
  pdf.rect(0, 0, pageWidth, 25, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(24);
  pdf.text('ðŸŒ± SoilSmart', 15, 18);
  
  pdf.setFontSize(12);
  pdf.text('AI-Powered Soil Analysis Report', 15, 22);
  
  // Report metadata
  pdf.setTextColor(100, 100, 100);
  pdf.setFontSize(10);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, pageWidth - 50, 10);
  pdf.text(`Location: ${userContext.location || 'Not specified'}`, pageWidth - 50, 15);
  
  let yPos = 35;
  
  // Soil Health Summary
  pdf.setTextColor(0, 0, 0);
  pdf.setFontSize(16);
  pdf.text('Soil Health Summary', 15, yPos);
  yPos += 10;
  
  // Create health score visual
  const canvas = document.createElement('canvas');
  canvas.width = 300;
  canvas.height = 150;
  const ctx = canvas.getContext('2d');
  
  // Draw health score gauge
  const centerX = 150;
  const centerY = 75;
  const radius = 50;
  
  // Background circle
  ctx.beginPath();
  ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
  ctx.strokeStyle = '#E5E7EB';
  ctx.lineWidth = 8;
  ctx.stroke();
  
  // Progress arc
  const angle = (soilData.soilHealthScore / 100) * 2 * Math.PI - Math.PI / 2;
  ctx.beginPath();
  ctx.arc(centerX, centerY, radius, -Math.PI / 2, angle);
  ctx.strokeStyle = soilData.soilHealthScore >= 80 ? '#10B981' : 
                    soilData.soilHealthScore >= 60 ? '#F59E0B' : '#EF4444';
  ctx.lineWidth = 8;
  ctx.lineCap = 'round';
  ctx.stroke();
  
  // Score text
  ctx.fillStyle = '#000000';
  ctx.font = 'bold 24px Arial';
  ctx.textAlign = 'center';
  ctx.fillText(soilData.soilHealthScore, centerX, centerY + 8);
  ctx.font = '12px Arial';
  ctx.fillText('/100', centerX, centerY + 25);
  
  // Add canvas to PDF
  const gaugeImage = canvas.toDataURL('image/png');
  pdf.addImage(gaugeImage, 'PNG', 15, yPos, 60, 30);
  
  // Soil parameters table
  pdf.setFontSize(12);
  pdf.text('Soil Parameters:', 85, yPos + 10);
  
  const parameters = [
    [`pH Level`, `${soilData.phLevel}`],
    [`Organic Matter`, `${soilData.organicMatter}%`],
    [`Nitrogen (N)`, `${soilData.nitrogen} ppm`],
    [`Phosphorus (P)`, `${soilData.phosphorus} ppm`],
    [`Potassium (K)`, `${soilData.potassium} ppm`],
    [`Soil Texture`, soilData.soilTexture],
    [`Moisture Level`, soilData.moistureLevel]
  ];
  
  let tableY = yPos + 15;
  pdf.setFontSize(10);
  parameters.forEach(([label, value]) => {
    pdf.text(label + ':', 85, tableY);
    pdf.text(value, 140, tableY);
    tableY += 5;
  });
  
  yPos += 50;
  
  // Crop Recommendations
  pdf.setFontSize(16);
  pdf.text('Recommended Crops', 15, yPos);
  yPos += 10;
  
  if (recommendations?.cropSuggestions) {
    recommendations.cropSuggestions.forEach((crop, index) => {
      pdf.setFillColor(240, 253, 244); // Light green background
      pdf.rect(15, yPos - 3, pageWidth - 30, 25, 'F');
      
      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`${index + 1}. ${crop.cropName}`, 20, yPos + 3);
      
      pdf.setFontSize(10);
      pdf.setTextColor(100, 100, 100);
      pdf.text(`Suitability: ${crop.suitabilityScore}%`, 20, yPos + 8);
      pdf.text(`Expected Yield: ${crop.expectedYield}`, 20, yPos + 13);
      pdf.text(`Growth Period: ${crop.growthPeriod}`, 20, yPos + 18);
      
      yPos += 30;
    });
  }
  
  // Budget Estimate
  if (recommendations?.totalBudgetEstimate) {
    pdf.setFillColor(254, 249, 195); // Light yellow
    pdf.rect(15, yPos, pageWidth - 30, 20, 'F');
    
    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Budget Estimate', 20, yPos + 8);
    pdf.text(`$${recommendations.totalBudgetEstimate} USD`, 20, yPos + 15);
  }
  
  // Footer
  pdf.setFontSize(8);
  pdf.setTextColor(150, 150, 150);
  pdf.text('Generated by SoilSmart AI - Empowering farmers with intelligent insights', 15, pageHeight - 10);
  
  // Save the PDF
  pdf.save(`SoilSmart-Report-${Date.now()}.pdf`);
};

// Component to use it
export const DownloadReportButton = ({ soilData, recommendations, userContext, strings }) => {
  const [downloading, setDownloading] = useState(false);
  
  const handleDownload = async () => {
    setDownloading(true);
    try {
      await generatePDFReport(soilData, recommendations, userContext, strings);
    } catch (error) {
      console.error('Failed to generate PDF:', error);
    }
    setDownloading(false);
  };
  
  return (
    <button
      onClick={handleDownload}
      disabled={downloading}
      className="btn-primary flex items-center space-x-2 bg-gradient-to-r from-earth-500 to-earth-600 hover:from-earth-600 hover:to-earth-700"
    >
      {downloading ? (
        <>
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
          <span>{strings.generating}...</span>
        </>
      ) : (
        <>
          <span>ðŸ“„</span>
          <span>{strings.downloadReport}</span>
        </>
      )}
    </button>
  );
};
